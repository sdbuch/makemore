---
title:
author: Sam Buchanan
format:
    html:
        code-fold: show
---

## Code imports

```{python}
import matplotlib.pyplot as plt
import torch
import torch.nn.functional as F
import treescope

treescope.basic_interactive_setup(autovisualize_arrays=True)
```

## Read the words

```{python}
words = open("names.txt", "r").read().splitlines()
print(len(words))
words[:8]
```

```{python}
chars = sorted(list(set("".join(words))))
stoi = {s: i + 1 for i, s in enumerate(chars)}
stoi["."] = 0
itos = {i: s for s, i in stoi.items()}
vocab_size = len(itos)
print(itos)
print(vocab_size)
```

## Make the dataset

```{python}
block_size = 3


def build_dataset(words):
    X, Y = [], []
    for w in words:
        context = [0] * block_size
        for ch in w + ".":
            ix = stoi[ch]
            X.append(context)
            Y.append(ix)
            # print(''.join(itos[i] for i in context), '--->', itos[ix])
            context = context[1:] + [ix]

    X, Y = torch.tensor(X), torch.tensor(Y)
    print(X.shape, Y.shape)
    return X, Y


import random

random.seed(42)
random.shuffle(words)
n1 = int(0.8 * len(words))
n2 = int(0.9 * len(words))

Xtr, Ytr = build_dataset(words[:n1])
Xdev, Ydev = build_dataset(words[n1:n2])
Xte, Yte = build_dataset(words[n2:])
```

## The MLP
Refactor to Pytorch style!


```{python}
class Linear:
    def __init__(self, fan_in, fan_out, bias=True, g=None):
        g = g if g is not None else torch.Generator().manual_seed(42)
        self.weight = torch.randn((fan_in, fan_out), generator=g) / fan_in**0.5
        self.bias = torch.zeros(fan_out) if bias else None

    def __call__(self, x):
        self.out = x @ self.weight
        if self.bias is not None:
            self.out += self.bias
        return self.out

    def parameters(self):
        return [self.weight] + ([] if self.bias is None else [self.bias])


class BatchNorm1d:
    def __init__(self, dim, eps=1e-5, momentum=0.1):
        self.eps = eps
        self.momentum = momentum
        self.training = True
        # Parameters, trained with BP
        self.gamma = torch.ones(dim)
        self.beta = torch.zeros(dim)
        # Buffers
        self.running_mean = torch.zeros(dim)
        self.running_var = torch.ones(dim)

    def __call__(self, x):
        # statistics
        if self.training:
            xmean = x.mean(0)
            xvar = x.var(0)
        else:
            xmean = self.running_mean
            xvar = self.running_var
        xhat = (x - xmean) / (xvar + self.eps) ** 0.5
        self.out = self.gamma * xhat + self.beta
        # Update buffers
        if self.training:
            with torch.no_grad():
                self.running_mean = (1 - self.momentum) * self.running_mean + self.momentum * xmean
                self.running_var = (1 - self.momentum) * self.running_var + self.momentum * xvar
        return self.out

    def parameters(self):
        return [self.gamma, self.beta]


class Tanh:
    def __call__(self, x):
        self.out = torch.tanh(x)
        return self.out

    def parameters(self):
        return []
```

```{python}
n_embd = 10
n_hidden = 100
g = torch.Generator().manual_seed(42)
C = torch.randn((vocab_size, n_embd), generator=g)

layers = [
    Linear(n_embd * block_size, n_hidden),
    BatchNorm1d(n_hidden),
    Tanh(),
    Linear(n_hidden, n_hidden),
    BatchNorm1d(n_hidden),
    Tanh(),
    Linear(n_hidden, n_hidden),
    BatchNorm1d(n_hidden),
    Tanh(),
    Linear(n_hidden, n_hidden),
    BatchNorm1d(n_hidden),
    Tanh(),
    Linear(n_hidden, n_hidden),
    BatchNorm1d(n_hidden),
    Tanh(),
    Linear(n_hidden, vocab_size),
    BatchNorm1d(vocab_size),
]

with torch.no_grad():
    layers[-1].gamma *= 0.1
    for layer in layers[:-1]:
        if isinstance(layer, Linear):
            layer.weight *= 5 / 3  # apply gain

parameters = [C] + [p for layer in layers for p in layer.parameters()]
print(sum(p.nelement() for p in parameters))
for p in parameters:
    p.requires_grad = True
```



## New optimization loop

```{python}

batch_size = 32
max_steps = 200000
lossi = []
ud = []

for i in range(max_steps):
    # Get minibatch
    ix = torch.randint(0, Xtr.shape[0], (batch_size,), generator=g)
    Xb, Yb = Xtr[ix], Ytr[ix]

    # Forward pass
    emb = C[Xb]
    x = emb.view(emb.shape[0], -1)
    for layer in layers:
        x = layer(x)
    loss = F.cross_entropy(x, Yb)

    # backward pass
    for layer in layers:
        layer.out.retain_grad()
    for p in parameters:
        p.grad = None
    loss.backward()

    # lr = lrs[i]
    lr = 0.1 if i < 100000 // 2 else 0.01
    for p in parameters:
        p.data += -lr * p.grad

    if i % 10000 == 0:
        print(f"{i:7d}/{max_steps:7d}: {loss.item():.4f}")
    lossi.append(loss.log10().item())

    with torch.no_grad():
        ud.append([(lr*p.grad.std() / p.data.std()).log10().item() for p in parameters])
    if i > 1000:
        break  # AFTER_DEBUG
```

```{python}
# Visualize histograms: Forward
plt.figure(figsize=(20, 4))
legends = []
for i, layer in enumerate(layers[:-1]):
    if isinstance(layer, Tanh):
        t = layer.out
        print(
            "layer %d (%10s): mean %+.2f, std %.2f, saturated: %.2f%%"
            % (
                i,
                layer.__class__.__name__,
                t.mean(),
                t.std(),
                (t.abs() > 0.97).float().mean() * 100,
            )
        )
        hy, hx = torch.histogram(t, density=True)
        plt.plot(hx[:-1].detach(), hy.detach())
        legends.append(f"layer {i} ({layer.__class__.__name__})")
plt.legend(legends)
plt.title("activation distribution")
```


```{python}
# Visualize histograms: Backward
plt.figure(figsize=(20, 4))
legends = []
for i, layer in enumerate(layers[:-1]):
    if isinstance(layer, Tanh):
        t = layer.out.grad
        print(
            "layer %d (%10s): mean %+.2f, std %.2f, saturated: %.2f%%"
            % (
                i,
                layer.__class__.__name__,
                t.mean(),
                t.std(),
                (t.abs() > 0.97).float().mean() * 100,
            )
        )
        hy, hx = torch.histogram(t, density=True)
        plt.plot(hx[:-1].detach(), hy.detach())
        legends.append(f"layer {i} ({layer.__class__.__name__})")
plt.legend(legends)
plt.title("activation distribution")
```

```{python}
# Visualize histograms: Grad to Data
plt.figure(figsize=(20, 4))
legends = []
for i, p in enumerate(parameters):
    t = p.grad
    if p.ndim == 2:
        print('weight %10s | mean %+f | std %e | grad:data ratio %e'
            % (
                tuple(p.shape),
                t.mean(),
                t.std(),
                t.std() / p.std(),
            )
        )
        hy, hx = torch.histogram(t, density=True)
        plt.plot(hx[:-1].detach(), hy.detach())
        legends.append(f"param {i} {tuple(p.shape)}")
plt.legend(legends)
plt.title("activation distribution")
```

```{python}
plt.figure(figsize=(20, 4))
legends = []
for i, p in enumerate(parameters):
    if p.ndim == 2:
        plt.plot([ud[j][i] for j in range(len(ud))])
        legends.append(f"param {i}")
plt.plot([0, len(ud)], [-3, -3], 'k')  # these should be around 1e-3, indicate on plot
plt.legend(legends);
```



# Old code

```{python}
def init_params(vocab_size, n_embd, block_size, n_hidden, g):
    C = torch.randn((vocab_size, n_embd), generator=g)
    W1 = (
        (5 / 3)
        / (n_embd * block_size) ** 0.5
        * torch.randn((n_embd * block_size, n_hidden), generator=g)
    )
    b1 = 0.01 * torch.randn((n_hidden,), generator=g)
    W2 = 0.01 * torch.randn((n_hidden, vocab_size), generator=g)
    b2 = 0.0 * torch.randn(vocab_size, generator=g)
    bngain = torch.ones((1, n_hidden))
    bnbias = torch.zeros((1, n_hidden))
    return [C, W1, b1, W2, b2, bngain, bnbias]
```

```{python}
(torch.randn(1000) * 0.2).std()
```


```{python}
n_embd = 10
n_hidden = 200
g = torch.Generator().manual_seed(42)

parameters = init_params(vocab_size, n_embd, block_size, n_hidden, g)
C, W1, b1, W2, b2, bngain, bnbias = parameters
print("Number of parameters: ", sum(p.nelement() for p in parameters))
for p in parameters:
    p.requires_grad = True
```

```{python}
x = torch.randn(1000, 10)
w = torch.randn(10, 200) / 10**0.5  # sqrt(fan-in)
y = x @ w
print(x.mean(), x.std())
print(y.mean(), y.std())
plt.figure(figsize=(20, 5))
plt.subplot(121)
plt.hist(x.view(-1).tolist(), 50, density=True)
plt.subplot(122)
plt.hist(y.view(-1).tolist(), 50, density=True)
```

Delving Deep into Rectifiers by Kaiming He et al: investigate init of deep nets

## Optimization loop: same as previous lecture

```{python}

batch_size = 32
max_steps = 200000
lossi = []
bnmean_running = torch.zeros((1, n_hidden))
bnstd_running = torch.ones((1, n_hidden))

for i in range(max_steps):
    # Get minibatch
    ix = torch.randint(0, Xtr.shape[0], (batch_size,), generator=g)
    Xb, Yb = Xtr[ix], Ytr[ix]

    emb = C[Xb]
    embcat = emb.view(emb.shape[0], -1)
    hpreact = embcat @ W1 + b1  # With batch norm, the b1 does nothing (mean'd out)
    bnmeani = hpreact.mean(0, keepdim=True)
    bnstdi = hpreact.std(0, keepdim=True)  # Default: use an epsilon 1e-5
    hpreact = bnbias + bngain * (hpreact - bnmeani) / bnstdi
    torch.std

    # Running estimates
    # This is an EMA!
    with torch.no_grad():
        bnmean_running = 0.999 * bnmean_running + 0.001 * bnmeani
        bnstd_running = 0.999 * bnstd_running + 0.001 * bnstdi

    h = torch.tanh(hpreact)
    logits = h @ W2 + b2
    loss = F.cross_entropy(logits, Yb)

    # backward pass
    for p in parameters:
        p.grad = None
    loss.backward()

    # lr = lrs[i]
    lr = 0.1 if i < max_steps // 2 else 0.01
    for p in parameters:
        p.data += -lr * p.grad

    if i % 10000 == 0:
        print(f"{i:7d}/{max_steps:7d}: {loss.item():.4f}")
    lossi.append(loss.log10().item())
```

```{python}
plt.figure(figsize=(20, 10))
plt.imshow(h.abs() > 0.99, cmap="gray", interpolation="nearest")
```


```{python}
plt.hist(h.view(-1).tolist(), 50)
```


```{python}
plt.plot(lossi)
```


```{python}
# Calibrate batch norm statistics at end of training
with torch.no_grad():
    emb = C[Xtr]
    embcat = emb.view(emb.shape[0], -1)
    hpreact = embcat @ W1 + b1
    bnmean = hpreact.mean(0, keepdim=True)
    bnstd = hpreact.std(0, keepdim=True)
```

```{python}
bnmean
```

```{python}
bnmean_running
```

```{python}
bnstd
```

```{python}
bnstd_running
```




```{python}
@torch.no_grad()
def split_loss(split):
    x, y = {
        "train": (Xtr, Ytr),
        "val": (Xdev, Ydev),
        "test": (Xte, Yte),
    }[split]
    emb = C[x]
    embcat = emb.view(emb.shape[0], -1)
    hpreact = embcat @ W1 + b1
    hpreact = bnbias + bngain * (hpreact - bnmean_running) / bnstd_running
    h = torch.tanh(hpreact)
    logits = h @ W2 + b2
    loss = F.cross_entropy(logits, y)
    print(split, loss.item())


split_loss("train")
split_loss("val")
```


```{python}
g = torch.Generator().manual_seed(2147483647 + 10)

for _ in range(20):
    out = []
    context = [0] * block_size
    while True:
        emb = C[torch.tensor(context)]
        h = torch.tanh(emb.view(1, -1) @ W1 + b1)
        logits = h @ W2 + b2
        probs = F.softmax(logits, dim=-1)
        ix = torch.multinomial(probs, num_samples=1, replacement=True, generator=g).item()
        context = context[1:] + [ix]
        out.append(ix)
        if ix == 0:
            break

    print("".join(itos[i] for i in out))
```


## Improving

```{python}
-torch.tensor(1 / 27.0).log()
```

The initialization is wrong... the initial loss is way larger than this. We
expect the initial outputs to be uniform.

```{python}
logits = torch.randn(4)
probs = torch.softmax(logits, dim=0)
probs
```
